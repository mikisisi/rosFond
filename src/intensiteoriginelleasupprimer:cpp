/***************************************************************************************************
A client that connects on the server and sends the XYZ command in order to control the motors thrust
***************************************************************************************************/
#include <iostream>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <netdb.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <arpa/inet.h>
#include "ADCmcp3008Spi.h"

#define MOTEURSTART 150
#define MOTEURMAX   400
#define MOTEURMIN   175
#define MOTEURSTOP  174
#define CHANNEL0    0
using namespace std;

void error(char *msg)
{
    perror(msg);
    exit(0);
}

void sendData( int sockfd, int x )
{
    int n;
    char buffer[32];
    sprintf( buffer, "%d\n", x );
    if ( (n = write( sockfd, buffer, strlen(buffer) ) ) < 0 )
        error( const_cast<char *>( "ERROR writing to socket") );
    buffer[n] = '\0';
}

int getData( int sockfd )
{
    char buffer[32];
    int n;
    if ( (n = read(sockfd,buffer,31) ) < 0 )
        error( const_cast<char *>( "ERROR reading from socket") );
    buffer[n] = '\0';
    return atoi( buffer );
}

void sleepMs(float ms)
{
    usleep((int) (ms*1000)); //convert to microseconds
    return;
}

int absoluteValue(int a )
{
    if(a<0 ) return -a ;
    return a ;
}

int isThereABigDifference(int a ,int b ,int thatIsABigDifference)
{
    if (absoluteValue(a-b)>thatIsABigDifference) return 1 ;
    return 0;
}

int main(int argc, char *argv[])
{
    int sockfd, portno = 51717, n=0;
    char serverIp[] = "169.254.0.10";
    struct sockaddr_in serv_addr;
    struct hostent *server;
    char buffer[256];
    int valeurFin=205;
    int a2dVal[8] = {510,5110,510}; // destine a contenir les valeurs des axes X Y Z
    int a2dBuff[8] = {510,5110,510}; // destine a contenir les valeurs des axes X Y Z
    int a2dChannel = 0;
    float intensity=0;
    int i ;
    unsigned char data[3];
    int channelActif=0;
    float maxim=0,minim=1024,media=0,bufCourant[65];
    string coutRes[8]= {"x="," y="," z=","potentiometre","intensite","","",""};
    ADCmcp3008Spi joystickSpi("/dev/spidev0.0", SPI_MODE_0, 1000000, 8);
    ///****************************************** source http://cs.smith.edu/dftwiki/index.php/Tutorial:_Client/Server_on_the_Raspberry_Pi
/*    printf( "contacting %s on port %d\n", serverIp, portno );

    if ( ( sockfd = socket(AF_INET, SOCK_STREAM, 0) ) < 0 )
        error( const_cast<char *>( "ERROR opening socket") );

    if ( ( server = gethostbyname( serverIp ) ) == NULL )
        error( const_cast<char *>("ERROR, no such host\n") );

    bzero( (char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy( (char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
    serv_addr.sin_port = htons(portno);
    if ( connect(sockfd,(struct sockaddr *)&serv_addr,sizeof(serv_addr)) < 0)
        error( const_cast<char *>( "ERROR connecting") );
  */  ///***************************

    /// Command loop

    while(  1 )        ///Lorsque l'on tourne le 3eme axe , on "eteint le moteur"
    {




intensity = 0 ;

/*
    //    TESTS POUR DETERMINER MIN MAX ET MOYENNE
for (i=0;i<10;i++)
{
             data[0] = 1;  //  first byte transmitted -> start bit
            data[1] = 0b10000000 |( ((a2dChannel & 7) << 4)); // second byte transmitted -> (SGL/DIF = 1, D2=D1=D0=0)
            data[2] = 0; // third byte transmitted....don't care
            joystickSpi.spiWriteRead(data, sizeof(data) );
            a2dBuff[4] = 0;
            a2dBuff[4] = (data[1]<< 8) & 0b1100000000; //merge data[1] & data[2] to get result
            a2dBuff[4] |=  (data[2] & 0xff);

        bufCourant[i]=a2dBuff[4] ;
//          sleepMs(0.1);
          intensity += bufCourant[i];
        }
intensity/=10;




        if (intensity < minim ) minim = intensity ;
        if (intensity > maxim ) maxim = intensity ;
        media += intensity ;
        n++;
  printf("\nthe intensity is %f",  media/n ) ;
  printf("\nthe min is %f",  minim ) ;
  printf("\nthe max is %f",  maxim ) ;

*/


for(a2dChannel=0; a2dChannel<4; a2dChannel++)
        {
            data[0] = 1;  //  first byte transmitted -> start bit
            data[1] = 0b10000000 |( ((a2dChannel & 7) << 4)); // second byte transmitted -> (SGL/DIF = 1, D2=D1=D0=0)
            data[2] = 0; // third byte transmitted....don't care
            joystickSpi.spiWriteRead(data, sizeof(data) );
            a2dBuff[a2dChannel] = 0;
            a2dBuff[a2dChannel] = (data[1]<< 8) & 0b1100000000; //merge data[1] & data[2] to get result
            a2dBuff[a2dChannel] |=  (data[2] & 0xff);
         
            intensity=0;

             for (i=0;i<65;i++)
            {
                 data[0] = 1;  //  first byte transmitted -> start bit
                data[1] = 0b10000000 |( ((a2dChannel & 7) << 4)); // second byte transmitted -> (SGL/DIF = 1, D2=D1=D0=0)
                data[2] = 0; // third byte transmitted....don't care
                joystickSpi.spiWriteRead(data, sizeof(data) );
                a2dBuff[a2dChannel] = 0;
                a2dBuff[a2dChannel] = (data[1]<< 8) & 0b1100000000; //merge data[1] & data[2] to get result
                a2dBuff[a2dChannel] |=  (data[2] & 0xff);

            bufCourant[i]=a2dBuff[a2dChannel] ;
             
              intensity += bufCourant[i];
            }

                    intensity/=65;
                   intensity-=510;


                    intensity=intensity *6*66*1.33/10000;
        }

         

 printf("\nthe intensity is %f", intensity   ) ;
  if (intensity < minim ) minim = intensity ;
        if (intensity > maxim ) maxim = intensity ;
        media += intensity ;
        n++;
  printf("\nthe  Medium intensity is %f",  media/n ) ;
  printf("\nthe min is %f",  minim ) ;
  printf("\nthe max is %f",  maxim ) ;
/*
        ///If the command has changed, we send the new data
        if (isThereABigDifference(a2dBuff[0],a2dVal[0],2) || isThereABigDifference(a2dBuff[1],a2dVal[1],2) || isThereABigDifference(a2dBuff[2],a2dVal[2],2))
        {
            sendData( sockfd, 1 );    ///1 CORRESPONDS AU MODE  "SET PWM"
            for(a2dChannel=0; a2dChannel<3; a2dChannel++)
            {
                a2dVal[a2dChannel]=   a2dBuff[a2dChannel] ;
                sendData ( sockfd, a2dVal[a2dChannel] );
//                cout << endl << "Sent  " <<coutRes[a2dChannel]<< "is:" << a2dVal[a2dChannel] ;
                sleepMs(5);
            }
        }
        cout<<endl;

*/
    }

  /*  sleepMs(500);
    cout << "Client : adieu serveurmoteur ! " << endl ;
    sleepMs(500);
    sendData( sockfd, -1 );///Deconnexion
    close( sockfd );
    */
return 0;
}
